{"version":3,"sources":["Components/Card/card-component.jsx","Components/Card-List/card-list.component.jsx","Components/SearchBox/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","map","Search","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","monster","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BACzB,6BAAKL,EAAMI,SAASE,OACpB,6BAAKN,EAAMI,SAASG,aCHbC,EAAW,SAAAR,GACpB,OAAO,qBAAKC,UAAU,YAAf,SACLD,EAAMI,SAASK,KAAI,SAAAL,GAAQ,OACzB,cAAC,EAAD,CAAwBA,SAAUA,GAAvBA,EAASC,UCJfK,G,MAAQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACjB,uBACAX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0BCG,E,kDA5Bb,aAAe,IAAD,8BACZ,gBACIC,MAAQ,CACXZ,SAAU,GACVa,YAAa,IAJF,E,gEAOM,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACnB,SAAUkB,S,+BAGhC,IAAD,SACyBE,KAAKR,MAA7BZ,EADD,EACCA,SAAUa,EADX,EACWA,YACZQ,EAAkBrB,EAASsB,QAAO,SAAAC,GAAO,OAC7CA,EAAQrB,KAAKsB,cAAcC,SAASZ,EAAYW,kBAEpD,OACE,sBAAK3B,UAAU,MAAf,UACE,gEACD,cAAC,EAAD,CAAQU,YAAY,kBAAkBC,aAAc,SAAAkB,GAAK,EAAKP,SAAS,CAACN,YAAaa,EAAEC,OAAOC,WAC7F,cAAC,EAAD,CAAU5B,SAAUqB,W,GAvBRQ,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,IAASC,OAMN,eAAC,IAAMC,SAAP,kBAAoB,cAAC,EAAD,OAGrBC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d1adb9c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt=\"monsters\" src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`} />\r\n      <h2>{props.monsters.name}</h2>\r\n      <h3>{props.monsters.email}</h3>\r\n    </div>\r\n);   ","import React from \"react\";\r\nimport './card-list.styles.css';\r\nimport {Card} from '../Card/card-component';\r\n\r\nexport const CardList = props => {\r\n    return <div className='card-list'>  \r\n     {props.monsters.map(monsters =>  \r\n        <Card key={monsters.id} monsters={monsters} />\r\n        )}\r\n        </div>;\r\n}; ","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const Search =({placeholder, handleChange}) => (\r\n    <input \r\n    className='search'\r\n    type='search' \r\n    placeholder={placeholder}\r\n    onChange={handleChange} />\r\n   \r\n);","import './App.css';\nimport { CardList } from './Components/Card-List/card-list.component';\nimport React, { Component } from 'react';\nimport { Search } from './Components/SearchBox/search-box.component.jsx';\n\nclass App extends Component{\n  constructor() {\n    super();\n   this.state = {\n     monsters: [],\n     searchField: ''\n   };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response =>response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  render() {\n    const { monsters, searchField}= this.state;\n    const filteredMonsters= monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex Webiste by RK</h1>\n     <Search placeholder='Search Monsters' handleChange={e=> {this.setState({searchField: e.target.value})}}/>\n      <CardList monsters={filteredMonsters}/>\n   </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// const name = 'Rehan khalil'\n// const currdate= new Date().toLocaleDateString();\n// const currtime= new Date().toLocaleTimeString();\nReactDOM.render(\n/* <React.Fragment>\n     <h1>My name is {name} </h1>,\n     <p> todays date is {currdate}</p>\n     <p> todays time is {currtime}</p> \n  </React.Fragment> */\n   <React.Fragment>    <App/>\n   </React.Fragment>\n   ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}